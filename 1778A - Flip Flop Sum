/*
A. Flip Flop Sum
Problem Statement
You are given an array of n integers a1, a2, ..., an. Each integer in the array is either 1 or −1. You are required to perform the following operation exactly once on the array:

Choose an index i (1 ≤ i < n) and flip the signs of ai and ai+1. Flipping the sign means converting −1 to 1 and 1 to −1.
Your task is to determine the maximum possible value of the sum a1 + a2 + ... + an after applying the above operation.

Input
The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 500), the number of test cases.

For each test case:

The first line contains an integer n (2 ≤ n ≤ 10^5), the length of the array a.
The second line contains n integers a1, a2, ..., an where each ai is either 1 or −1.
The sum of n over all test cases does not exceed 10^5.

Output
For each test case, print the maximum possible sum of the array a that can be obtained, in a separate line.

*/

#include<bits/stdc++.h>
using namespace std;

int main()
{

    int t;
    cin>>t;
    while (t--)
    {
        int n;
        cin>>n;
        int i,j,sum=0;
        
        vector<int>v(n),ans;
        for(i=0;i<n;i++)
        {
            cin>>v[i];
            sum+=v[i];
            
        }
        bool flag=false;
        for(i=1;i<n;i++)
        {
            if(v[i-1]==-1 && v[i]==-1)
            {
                sum=sum+4;
                flag=true;
                break;
            }
        }
        if(!flag)
        {
            for(i=1;i<n;i++)
           {
            if(v[i-1]==-1 || v[i]==-1)
            {
                
                flag=true;
                break;
            }
        }
        }
        if(flag==false)
        {
            sum=sum-4;
        }
        cout<<sum<<endl;
    }
    return 0;
    
}
