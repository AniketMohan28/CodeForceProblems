/*
Problem Statement:
You are given a string s. Each character is either 0 or 1.

You want all 1s in the string to form a contiguous subsegment. For example, if the string is 0, 1, 00111, or 01111100, then all 1s form a contiguous subsegment, and if the string is 0101, 100001, or 11111111111101, then this condition is not met.

You may erase some (possibly none) 0s from the string. What is the minimum number of 0s that you have to erase?

Input:
The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.
Then t lines follow, each representing a test case. Each line contains one string s (1 ≤ |s| ≤ 100); each character of s is either 0 or 1.

Output:
Print t integers, where the i-th integer is the answer to the i-th testcase (the minimum number of 0s that you have to erase from s).
*/

//Solution :

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t;
    cin>>t;
    while (t--)
    {
        string s;
        cin>>s;
        int i,Last1=-1,First1=-1,count=0;
        for(i=0;i<s.length();i++)
        {
            if(s[i]=='1')
            {
                First1=i;
                break;
            }
        }
        for(i=s.length()-1;i>=0;i--)
        {
            if(s[i]=='1')
            {
                Last1=i;
                break;
            }
        }
        for(i=First1+1;i<Last1;i++)
        {
            if(s[i]=='0')
            {
                count++;
                
            }
        }
        if(First1==-1 || Last1==First1)
        {
            cout<<0<<endl;
        }
        else
        {
            cout<<count<<endl;
        }
        
    }
    return 0;
}
