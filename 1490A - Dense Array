/*
### Problem Statement

Polycarp calls an array dense if the greater of any two adjacent elements is not more than twice the smaller. Formally, for any `i` (1 ≤ i ≤ n-1), this condition must be satisfied:
\[ \frac{\max(a[i], a[i+1])}{\min(a[i], a[i+1])} \leq 2 \]

For example, the arrays `[1, 2, 3, 4, 3]`, `[1, 1, 1]`, and `[5, 10]` are dense, whereas the arrays `[5, 11]`, `[1, 4, 2]`, and `[6, 6, 1]` are not dense.

Given an array `a` of `n` integers, determine the minimum number of numbers you need to add to make the array dense. Numbers can be inserted anywhere in the array. If the array is already dense, no numbers need to be added.

For example, if `a = [4, 2, 10, 1]`, the answer is 5. One possible way to make the array dense is: `a = [4, 2, 3, 5, 10, 6, 4, 2, 1]` (there are other ways to achieve this).

### Input
- The first line contains one integer `t` (1 ≤ t ≤ 1000), the number of test cases.
- Each test case consists of:
  - The first line containing one integer `n` (2 ≤ n ≤ 50), the length of the array `a`.
  - The second line containing `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 50).

### Output
For each test case, output one integer — the minimum number of numbers that must be added to the array to make it dense.
*/


#include<bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin>>t;
    while (t--)
    {
        int n;
        cin>>n;
        int i,j,count=0;
        vector<int> v(n);
        for(i=0;i<n;i++)
        {
            cin>>v[i];

            
        }
        for(i=0;i<v.size()-1;i++)
        {
           int a=min(v[i],v[i+1]);
            while (max(v[i],v[i+1]) > 2 * a) 
            {
                a *= 2;
                count++;
               
            }
        }
        cout<<count<<endl;
    }
}
