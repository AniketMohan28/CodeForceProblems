/* 
Problem: B. Plus-Minus Split
Time limit per test: 1 second
Memory limit per test: 256 megabytes

You are given a string s of length n consisting of characters '+' and '-'. 
The string s represents an array a of length n defined as:

a[i] = 1 if s[i] is '+'
a[i] = -1 if s[i] is '-'

You need to calculate the minimum possible penalty by optimally splitting 
the array a into non-empty subarrays b1, b2, ..., bk such that 
b1 + b2 + ... + bk = a, where '+' denotes array concatenation.

The penalty of a single subarray is defined as the absolute value of its 
sum multiplied by its length. Specifically, for a subarray c of length m, 
its penalty is calculated as:

p(c) = |c1 + c2 + ... + cm| × m

The total penalty is the sum of penalties of all subarrays:

Total Penalty = p(b1) + p(b2) + ... + p(bk)

Your task is to find the minimum possible penalty.

Input:
- The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.
- Each test case consists of:
  - The first line contains a single integer n (1 ≤ n ≤ 5000) — the length of the string s.
  - The second line contains the string s (with s[i] being either '+' or '-').

Note: There are no constraints on the sum of n over all test cases.

Output:
For each test case, output a single integer representing the minimum possible penalty you will receive.
*/




#include<bits/stdc++.h>
using namespace std;

int main()
{

    int t;
    cin>>t;
    while (t--)
    {
        int n;
        cin>>n;
        string s;
        cin>>s;
        int i,j,countP=0,countM=0;
        for(i=0;i<n;i++)
        {
            if(s[i]=='-')
            {
                countM++;
            }
            else if(s[i]=='+')
            {
                countP++;
            }
        }
       int total_sum = countP- countM;

        int penalty = abs(total_sum);
        cout << penalty << endl;
    }
    return 0;
}
