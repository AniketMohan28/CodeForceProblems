/*
A. The Ultimate Square
Time Limit: 1 second
Memory Limit: 256 megabytes
Problem Statement
You have n rectangular wooden blocks, numbered from 1 to n. The i-th block has a height of 1 unit and a length of ⌈i/2⌉ units.

Here, ⌈x/2⌉ denotes the result of dividing x by 2, rounded up. For example:

⌈4/2⌉ = 2
⌈5/2⌉ = ⌈2.5⌉ = 3
If n = 5, the blocks have the following sizes: 1×1, 1×1, 1×2, 1×2, 1×3.

Your task is to find the maximum possible side length of a square you can create using these blocks without rotating any of them. Note that you don't have to use all of the blocks.

Input
The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.
The first line of each test case contains a single integer n (1 ≤ n ≤ 10^9) — the number of blocks.
Output
For each test case, print a single integer — the maximum possible side length of the square you can create.
*/


#include<bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        long long n;
        cin>>n;
        if(n%2==0)
        {
            cout<<n/2<<endl;
        }
        else
        {
            cout<<(n/2)+1<<endl;
        }
    }
    return 0;
}
