## B. osu!mania

**Time limit per test:** 1 second  
**Memory limit per test:** 256 megabytes

You are playing your favorite rhythm game, osu!mania. The layout of your beatmap consists of `n` rows and 4 columns. Since notes at the bottom are closer, you will process the bottommost row first and the topmost row last. Each row will contain exactly one note, represented as a `#`.

For each note `1, 2, …, n`, in the order of processing, output the column in which the note appears.

### Input

The first line contains `t` (1 ≤ t ≤ 100) — the number of test cases.

For each test case:
- The first line contains `n` (1 ≤ n ≤ 500) — the number of rows of the beatmap.
- The following `n` lines contain 4 characters each. The `i-th` line represents the `i-th` row of the beatmap from the top. It is guaranteed that the characters are either `.` or `#`, and exactly one of the characters is `#`.

It is guaranteed that the sum of `n` over all test cases does not exceed 500.

### Output

For each test case, output `n` integers on a new line — the column that the `i-th` note appears in, for all `i` from 1 to `n`.

### Example

**Input:**





#include<bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int i,j,sum=0,count=0,countN=0,countP=0;
        vector<vector<char>> v(n, vector<char>(4));
        for(i=0;i<n;i++)
        {
            for(j=0;j<4;j++)
            {
                cin>>v[i][j];
            }
        }
        vector<int> ans;
        for(i=n-1;i>=0;i--)
        {
            for(j=0;j<4;j++)
            {
                if(v[i][j]=='#')
                {
                    ans.push_back(j+1);
                }
            }
        }
        
        for(i=0;i<n;i++)
        {
            cout<<ans[i]<<" ";
        }
        cout<<endl;
    }
    return 0;
}




